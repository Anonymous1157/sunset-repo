From abbc6da141bb902d6dd81e2b8b5347f7e9c12e94 Mon Sep 17 00:00:00 2001
From: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date: Wed, 18 Sep 2019 07:37:25 +0900
Subject: [PATCH] crpp: use 'True division' for integer result

In Python 2.2 or later, 'true division' and 'classic division',
'floor division' are distinguished. This commit uses 'true
division' to get integer result.

PEP 238 -- Changing the Division Operator | Python.org
https://www.python.org/dev/peps/pep-0238/

Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
---
 src/crpp | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/crpp b/src/crpp
index a6a854d..3913aa4 100644
--- a/src/crpp
+++ b/src/crpp
@@ -480,7 +480,7 @@ def write_config_rom(f, ouidb, rom):
         f.write("\n")
 
 def read_le32_data(s, l, rom):
-    for i in range(0, l / 4):
+    for i in range(0, l // 4):
         j = i * 4
         rom[i] = (ord(s[j    ])      ) + \
                  (ord(s[j + 1]) <<  8) + \
@@ -488,7 +488,7 @@ def read_le32_data(s, l, rom):
                  (ord(s[j + 3]) << 24)
 
 def read_be32_data(s, l, rom):
-    for i in range(0, l / 4):
+    for i in range(0, l // 4):
         j = i * 4
         rom[i] = (ord(s[j    ]) << 24) + \
                  (ord(s[j + 1]) << 16) + \
@@ -504,7 +504,7 @@ def read_firecontrol_output(s, rom):
             if j < 0xfffff0000400 or j >= 0xfffff0000800:
                 i = -1
                 continue
-            i = (j - 0xfffff0000400) / 4
+            i = (j - 0xfffff0000400) // 4
             if i == 0:
                 rom[:] = [0] * 256
             continue
@@ -529,7 +529,7 @@ def read_log_data(s, rom):
             if j < 0xfffff0000400 or j >= 0xfffff0000800:
                 i = -1
                 continue
-            i = (j - 0xfffff0000400) / 4
+            i = (j - 0xfffff0000400) // 4
             if i == 0:
                 rom[:] = [0] * 256
             continue
