From ad744e4c00c74e085b057a5bb2e77ce9d9e05347 Mon Sep 17 00:00:00 2001
From: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date: Wed, 18 Sep 2019 07:34:01 +0900
Subject: [PATCH] crpp: code refactoring with 2to3

Python 2 is planned to be end of life in Apr. 2020.

PEP 373 -- Python 2.7 Release Schedule | Python.org
https://www.python.org/dev/peps/pep-0373/

This commit changes codes for Python 3 according to the result
of 2to3.
https://docs.python.org/3/library/2to3.html

Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
---
 src/crpp | 17 +++++++++--------
 1 file changed, 9 insertions(+), 8 deletions(-)

diff --git a/src/crpp b/src/crpp
index 2c42a9b..a6a854d 100644
--- a/src/crpp
+++ b/src/crpp
@@ -48,6 +48,7 @@ History:
 2012-06-12: updated dmesg reader to log format of kernel 3.4
 2015-01-31: updated comment on oui.db: let sed squash leading whitespace
 """
+from functools import reduce
 
 ouidb_search_paths = (
     "/usr/share/misc/oui.db",
@@ -56,7 +57,7 @@ ouidb_search_paths = (
 
 def crc16(rom, i, l):
     def nextcrc(c, q):
-        for j in xrange(28, -1, -4):
+        for j in range(28, -1, -4):
             s = (c >> 12 ^ q >> j) & 0xf
             c = c << 4 ^ s << 12 ^ s << 5 ^ s
         return c & 0xffff
@@ -67,7 +68,7 @@ def u8_to_char(n):
     if n == 0:
         return ""
     # printable character from minimal ASCII
-    if n in range(0x20, 0x23) + range(0x25, 0x5b) + [0x5f] + range(0x61, 0x7b):
+    if n in list(range(0x20, 0x23)) + list(range(0x25, 0x5b)) + [0x5f] + list(range(0x61, 0x7b)):
         return chr(n)
     # other character
     return "~"
@@ -403,7 +404,7 @@ def write_block(f, ouidb, rom, blocks, i, context):
             "               -----------------------------------------------------------------\n"
             "%x  %08x  %s_length %d, crc %d%s\n" %
             (headline, o, r, ieee1212_types[t], l, c,
-             " (should be %d)" % (crc) if crc <> c else ""))
+             " (should be %d)" % (crc) if crc != c else ""))
     end = min(i + l, 255)
     i += 1
     o += 4
@@ -423,7 +424,7 @@ def write_bus_info_block(f, ouidb, rom, blocks):
     crc = crc16(rom, 1, crc_len)
     f.write("400  %08x  bus_info_length %d, crc_length %d, crc %d%s\n" %
             (r, bib_len, crc_len, c,
-             " (should be %d)" % (crc) if crc <> c else ""))
+             " (should be %d)" % (crc) if crc != c else ""))
     r = rom[1]
     f.write("404  %08x  bus_name %s\n" % (r, u32_to_string(r)))
     if r == 0x31333934:
@@ -479,7 +480,7 @@ def write_config_rom(f, ouidb, rom):
         f.write("\n")
 
 def read_le32_data(s, l, rom):
-    for i in xrange(0, l / 4):
+    for i in range(0, l / 4):
         j = i * 4
         rom[i] = (ord(s[j    ])      ) + \
                  (ord(s[j + 1]) <<  8) + \
@@ -487,7 +488,7 @@ def read_le32_data(s, l, rom):
                  (ord(s[j + 3]) << 24)
 
 def read_be32_data(s, l, rom):
-    for i in xrange(0, l / 4):
+    for i in range(0, l / 4):
         j = i * 4
         rom[i] = (ord(s[j    ]) << 24) + \
                  (ord(s[j + 1]) << 16) + \
@@ -556,11 +557,11 @@ def build_config_rom(f):
 def build_oui24_db(paths):
     for p in paths:
         try:
-            return dict(map(lambda l: (int(l[:6], 16), l[7:-1]), file(p, "r")))
+            return dict([(int(l[:6], 16), l[7:-1]) for l in file(p, "r")])
         except (IOError, ValueError):
             continue
     # fallback: specifiers from the protocols dictionary
-    return dict(map(lambda proto: (proto[0], proto[1][0]), protocols.iteritems()))
+    return dict([(proto[0], proto[1][0]) for proto in iter(protocols.items())])
 
 def main():
     import sys
